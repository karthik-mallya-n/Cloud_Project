// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  delivery      Delivery[]
  senderQR      senderQR[]
  ReceiverQR    ReceiverQR[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Delivery {
  id          String         @id @default(cuid())
  trackingID  String         @unique
  senderID    String
  sender      User           @relation(fields: [senderID], references: [id])
  receiverID  String
  fromPlace   String
  toPlace     String
  fromAddress String?
  toAddress   String?
  sphone      String
  rphone      String
  plan        Plan           @default(STANDARD)
  scanNumber  Int
  status      DeliveryStatus
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now())
  items       Int
  senderQR    senderQR[]
  ReceiverQR  ReceiverQR[]

  @@index([senderID])
}

enum Plan {
  STANDARD
  EXPRESS
}

enum DeliveryStatus {
  PENDING
  IN_PROGRESS
  DELIVERED
}

model Bus {
  numberPlate String      @id
  name        String
  orders      BusOrders[]
}

model BusOrders {
  id          String      @id @default(cuid())
  orderNum    Int         @default(autoincrement())
  trackingID  String
  numberPlate String
  bus         Bus         @relation(fields: [numberPlate], references: [numberPlate])
  Pickup      String
  Destination String
  rid         String
  Status      OrderStatus

  @@index([orderNum])
}

enum OrderStatus {
  ACCEPTED
  PENDING
  DECLINED
}

model senderQR {
  id         String   @id @default(cuid())
  deliveryId String
  senderID   String
  deliver    Delivery @relation(fields: [deliveryId], references: [trackingID])
  sender     User     @relation(fields: [senderID], references: [id])
  scanNumber Int 
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  isalive   Boolean @default(true)
}

model ReceiverQR {
  id         String   @id @default(cuid())
  deliveryId String
  receiverID String
  deliver    Delivery @relation(fields: [deliveryId], references: [trackingID])
  receiver   User     @relation(fields: [receiverID], references: [id])
  scanNumber Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  isalive   Boolean @default(false)
}

model receiverMail {
  id         String   @id @default(cuid())
  deliveryId String
  rEmail     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}